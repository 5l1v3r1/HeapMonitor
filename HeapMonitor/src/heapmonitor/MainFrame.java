/*
 * MainFrame.java
 * 
 *
 */

package heapmonitor;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.net.Socket;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

/**
 *
 * @author b0yd
 */
public class MainFrame extends javax.swing.JFrame implements ActionListener {
   
    private SocketHandler theSocketHandler = null;
    public static ExecutorService Executor;
    private TraceJPanel theTraceJPanel;
    private MemoryJPanel theMemoryJPanel;
    private AllocationJPanel theAllocationJPanel;
    private FreeJPanel theFreeJPanel;
    
    public static int ALLOCATION_HEADER_SIZE = 8;
    public static boolean AUTOSCROLL_FLAG = true;
        
    public final static String COLORIZE_ALLOC = "Colorize_Alloc";
    public final static String COLORIZE_FREE = "Colorize_Free";
    
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        initializeComponents();                  
    }
    
       
     //========================================================================
    /**
     *  Handles the various actions
     * @param evt
    */
    @Override
    public void actionPerformed(ActionEvent evt) {
        
        String actionCommand = evt.getActionCommand();
        switch (actionCommand) {
            case COLORIZE_ALLOC:
                MemoryChunk aChunk = (MemoryChunk)theAllocationJPanel.getSelected();
                if( aChunk != null ){
                    Color memColor = JColorChooser.showDialog(this, "Color Picker", aChunk.getColor());
                    if( memColor != null){
                        aChunk.setColor(memColor);
                        refreshComponents(aChunk.getAddress());
                    }
                }
                break;
            case COLORIZE_FREE:
                aChunk = (MemoryChunk)theFreeJPanel.getSelected();
                if( aChunk != null ){
                    Color memColor = JColorChooser.showDialog(this, "Color Picker", aChunk.getColor());
                    if( memColor != null){
                        aChunk.setColor(memColor);
                        refreshComponents(aChunk.getAddress());
                    }
                }
                break;
            default:
                break;           
        }       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ipAddressField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        portField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        addrTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        goButton = new javax.swing.JButton();
        mainTabPane = new javax.swing.JTabbedPane();
        allocTabPane = new javax.swing.JTabbedPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitButton = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        optionsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1015, 780));

        connectPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("IP Address:");

        ipAddressField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ipAddressField.setText("127.0.0.1");

        jLabel2.setText("Port:");

        portField.setText("7777");
        portField.setToolTipText("");

        connectButton.setText("Connect");
        connectButton.setMargin(new java.awt.Insets(2, 8, 2, 8));
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        addrTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel5.setText(" Address:");

        goButton.setText("Go");
        goButton.setMargin(new java.awt.Insets(2, 8, 2, 8));
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout connectPanelLayout = new javax.swing.GroupLayout(connectPanel);
        connectPanel.setLayout(connectPanelLayout);
        connectPanelLayout.setHorizontalGroup(
            connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ipAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(connectButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(5, 5, 5)
                .addComponent(addrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(goButton)
                .addContainerGap())
        );
        connectPanelLayout.setVerticalGroup(
            connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(connectPanelLayout.createSequentialGroup()
                        .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(connectButton))
                            .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(goButton)
                                .addComponent(jLabel5)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(connectPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ipAddressField)
                            .addComponent(portField)
                            .addComponent(addrTextField))))
                .addContainerGap())
        );

        fileMenu.setText("File");

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        fileMenu.add(exitButton);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        optionsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        optionsMenuItem.setText("Options");
        optionsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(optionsMenuItem);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(connectPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 785, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(allocTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(connectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mainTabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
                    .addComponent(allocTabPane))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        
        String ipStr = ipAddressField.getText();
        String portStr = portField.getText();
        
        connect(ipStr, portStr);
    }//GEN-LAST:event_connectButtonActionPerformed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        String theAddressStr = addrTextField.getText().trim();
        int radix = 10;
        if( theAddressStr.contains("0x")){
            radix = 16;
            theAddressStr = theAddressStr.replace("0x", "");
        }
        
        long theAddr = 0;
        try {
            theAddr = Long.parseLong(theAddressStr, radix);
            theMemoryJPanel.loadMemoryPage(theAddr, false);
        } catch( NumberFormatException ex ){
            try {
                radix = 16;
                theAddr = Long.parseLong(theAddressStr, radix);
                theMemoryJPanel.loadMemoryPage(theAddr, false);
            } catch( NumberFormatException ex1 ){
            }
        }
        
        //Get the allocation for this address
        Map.Entry< Long, MemoryChunk> curEntry = theMemoryJPanel.getAllocation( MemoryJPanel.LOWER_EQUAL_ADDRESS, theAddr);
        if( curEntry != null ){
            MemoryChunk aChunk = curEntry.getValue();
            setSelectedChunk(aChunk);
        }
    }//GEN-LAST:event_goButtonActionPerformed

    private void optionsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsMenuItemActionPerformed
        OptionsJDialog options = new OptionsJDialog( this, true );
        options.setLocationRelativeTo(null);
        options.setVisible(true);
    }//GEN-LAST:event_optionsMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {            
            javax.swing.UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());            
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addrTextField;
    private javax.swing.JTabbedPane allocTabPane;
    private javax.swing.JButton connectButton;
    private javax.swing.JPanel connectPanel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton goButton;
    private javax.swing.JTextField ipAddressField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTabbedPane mainTabPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem optionsMenuItem;
    private javax.swing.JTextField portField;
    // End of variables declaration//GEN-END:variables

    //=======================================================================
    /**
     * 
     * @param ipStr
     * @param passedPort 
     */
    private void connect( String ipStr, String passedPort ) {
        
        if( theSocketHandler == null && ipStr != null && passedPort != null ){
            int serverPort = Integer.parseInt(passedPort);
            try {
                //Remove all allocations and clear screen
                resetGui();
                
                Socket clientSocket = new Socket(ipStr, serverPort);
                theSocketHandler = new SocketHandler(this, clientSocket);
                Executor.execute(theSocketHandler);
                
                connectButton.setText("Disconnect");
                
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, "Unable to connect.", ex);
            }
        }
    }
    
    //=======================================================================
    /**
     *
     * @param passedHandler
     */
    public void setSocketHandler(SocketHandler passedHandler) {
        theSocketHandler = passedHandler;
        if( theSocketHandler == null){
            connectButton.setText("Connect");
        }
    }

    //=======================================================================
    /**
     * 
     */
    private void initializeComponents() {
        
        //Create the main panels
        theTraceJPanel = new TraceJPanel( this );
        theMemoryJPanel = new MemoryJPanel( this );
        
        //Add tabs to tabbed pane
        mainTabPane.addTab("Memory", theMemoryJPanel);
        mainTabPane.addTab("Call Trace", theTraceJPanel);
        mainTabPane.setSelectedIndex(0);        
        
        //Create the allocation panels
        theAllocationJPanel = new AllocationJPanel( this );  
        theFreeJPanel = new FreeJPanel( this ); 
        
        //Add tabs to tabbed pane
        allocTabPane.addTab("Allocations", theAllocationJPanel);
        allocTabPane.addTab("Frees", theFreeJPanel);
        allocTabPane.setSelectedIndex(0); 
        
        //Create thread pool
        Executor = Executors.newCachedThreadPool();
        
        theAllocationJPanel.setAutoscrollFlag(AUTOSCROLL_FLAG);
        theFreeJPanel.setAutoscrollFlag(AUTOSCROLL_FLAG);
                 
    }

    //===================================================================
    /**
     * 
     * @param value
     * @param length
     * @return 
     */
    public static String formatString(String value, int length){
        
        String retVal;
        if (value.length() > length){
            retVal = value.substring(0, length - 3);
            retVal += "...";
        } else {
            retVal = value;
            retVal += String.format( "%" + (length - retVal.length()) + "s", "");
        }

        return retVal;
    }
    
    //======================================================================
    /**
     * Set the selected chunk in the allocation list
     * @param passedChunk 
     */
    public void setSelectedChunk( MemoryChunk passedChunk ){
        theAllocationJPanel.setSelected(passedChunk);
    }
   
    //=======================================================================
    /**
     *
     * @param passedAddress
     * @param passedTrace 
     */
    public void addTrace(long passedAddress, Trace passedTrace) {
                       
        //Get the memory chunk if it exists
        MemoryChunk aChunk = theMemoryJPanel.getMemoryChunk( passedAddress );
        if( aChunk == null )
            aChunk = new MemoryChunk(passedAddress);
        
             
        //Add to the chunk
        final MemoryChunk finalChunk = aChunk;
        if( passedTrace instanceof AllocationTrace ){  
            
            AllocationTrace anAllocTrace = (AllocationTrace)passedTrace;
            finalChunk.addAllocation(anAllocTrace);
            
            //Add the allocation
            SwingUtilities.invokeLater( new Runnable(){
                @Override
                public void run() {
                    theAllocationJPanel.addMemoryChunk( finalChunk );
                    theFreeJPanel.removeMemoryChunk( finalChunk );
                }
            });
            
            // aStr = "Allocated " + size + " bytes at Address: " + Long.toHexString(address);

        } else {
            
            //Free the allocation, remove entry
            finalChunk.addFree(passedTrace);
            //aStr = "Freeing Address: " + Long.toHexString(address);
            
            //Add the free
            //Add the allocation
            SwingUtilities.invokeLater( new Runnable(){
                 @Override
                public void run() {
            
                    theFreeJPanel.addFree( finalChunk );
                    theAllocationJPanel.removeMemoryChunk( finalChunk );
                }
            });
                
        }     
        
        //Update the chunk
        theMemoryJPanel.setMemoryChunk(passedAddress, aChunk);
                
        refreshComponents(passedAddress);
    }
    
    //=======================================================================
    /**
     * 
     * @param passedAddress 
     */
    public void refreshComponents( final long passedAddress ){
        
        theMemoryJPanel.refreshMemoryPage( passedAddress );
        
        //Repaint if the adddress space is open
        SwingUtilities.invokeLater( new Runnable(){

            @Override
            public void run() {                         
                //Repaint
                allocTabPane.repaint();
            }
         });
    }

    //==========================================================================
    /**
     * 
     */
    private synchronized void resetGui() {
        
        //Clear main panels
        theMemoryJPanel.clearPanel();
        theTraceJPanel.clearPanel();
        
        //Clear alloc panels
        theAllocationJPanel.clearPanel();
        theFreeJPanel.clearPanel();
       
    }

    //========================================================================
    /**
     * 
     * @return 
     */
    public TraceJPanel getTracePanel() {
        return theTraceJPanel;
    }

    //========================================================================
    /**
     * 
     * @return 
     */
    public MemoryJPanel getMemoryPanel() {
        return theMemoryJPanel;
    }

    //========================================================================
    /**
     * 
     * @param selected 
     */
    public void setScrollFlag(boolean selected) {
        theAllocationJPanel.setAutoscrollFlag(selected);
        theFreeJPanel.setAutoscrollFlag(selected);
        
        //Set autoscroll flag
        AUTOSCROLL_FLAG = selected;
    }
          
   
}
